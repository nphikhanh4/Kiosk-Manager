@model IEnumerable<KioskManagementWebApp.Models.Kiosk>

@{
    int vacantCount = 0;
    int rentedCount = 0;
    int totalCount = 0;

    foreach (var k in Model)
    {
        totalCount++;
        var currentRenter = k.Renters?.FirstOrDefault(r => r.IsActive);
        if (!k.IsRented || currentRenter == null)
            vacantCount++;
        else
            rentedCount++;
    }
}

<div class="tab-pane fade show active" id="kiosk-content" role="tabpanel" aria-labelledby="kiosk-tab">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3>Quản lý Kiosk</h3>
    </div>
    <h4>Còn trống @vacantCount | Đã cho thuê @rentedCount | Chưa thu phí @(ViewData["UnpaidCount"] ?? 0)</h4>
    <div class="d-flex justify-content-end mb-3">
        <button class="btn btn-success me-2" data-bs-toggle="modal" data-bs-target="#createModal">Thêm Kiosk trống</button>
    </div>

    <div class="row">
        @foreach (var item in Model)
        {
            var currentRenter = item.Renters?.FirstOrDefault(r => r.IsActive);
            bool isCurrentlyRented = item.IsRented && currentRenter != null;
            bool isUnpaid = ViewData["UnpaidKioskIds"] != null && ((List<int>)ViewData["UnpaidKioskIds"]).Contains(item.Id);
            <div class="col-md-3">
                <div class="card-kiosk @(isCurrentlyRented ? "rented" : "") @(isUnpaid ? "unpaid" : "")">
                    <h5>@item.Location - @item.Name</h5>
                    @if (isCurrentlyRented)
                    {
                        <p>@currentRenter.RenterName</p>
                    }
                    else
                    {
                        <p>Chưa có người thuê</p>
                    }
                    <p>@item.RentalFee.ToString("N0") VNĐ/tháng</p>
                    @if (isCurrentlyRented)
                    {
                        <button class="btn btn-success btn-custom return-kiosk" data-id="@item.Id">Hủy thuê</button>
                    }
                    else
                    {
                        <button class="btn btn-success btn-custom rent-kiosk"
                                data-id="@item.Id"
                                data-name="@item.Name"
                                data-location="@item.Location"
                                data-rentalfee="@item.RentalFee.ToString("N0")">
                            Cho thuê
                        </button>
                    }
                    <button class="btn btn-secondary btn-custom view-details"
                            data-id="@item.Id"
                            data-name="@item.Name"
                            data-location="@item.Location"
                            data-isrented="@(isCurrentlyRented ? "true" : "false")"
                            data-rentername="@(currentRenter != null ? currentRenter.RenterName : "Chưa có người thuê")"
                            data-rentalstartdate="@(currentRenter != null ? currentRenter.RentalStartDate?.ToString("dd/MM/yyyy") : "Chưa có")"
                            data-rentalenddate="@(currentRenter != null && currentRenter.RentalEndDate.HasValue ? currentRenter.RentalEndDate.Value.ToString("dd/MM/yyyy") : "Chưa có")"
                            data-rentalfee="@item.RentalFee.ToString("N0")">
                        Xem
                    </button>
                    <button class="btn btn-primary btn-custom edit-kiosk"
                            data-id="@item.Id"
                            data-name="@item.Name"
                            data-location="@item.Location"
                            data-isrented="@(isCurrentlyRented ? "true" : "false")"
                            data-rentername="@(currentRenter != null ? currentRenter.RenterName : "")"
                            data-rentalstartdate="@(currentRenter != null ? currentRenter.RentalStartDate?.ToString("yyyy-MM-dd") : "")"
                            data-rentalenddate="@(currentRenter != null && currentRenter.RentalEndDate.HasValue ? currentRenter.RentalEndDate.Value.ToString("yyyy-MM-dd") : "")"
                            data-rentalfee="@item.RentalFee">
                        Sửa
                    </button>
                    @if (!isCurrentlyRented)
                    {
                        <button class="btn btn-danger btn-custom delete-kiosk" data-id="@item.Id">Xóa</button>
                    }
                    else
                    {
                        <button class="btn btn-danger btn-custom pay-kiosk"
                                data-renterid="@currentRenter.Id"
                                data-amount="@(((Dictionary<int, decimal>)ViewData["UnpaidAmounts"]).ContainsKey(currentRenter.Id) ? ((Dictionary<int, decimal>)ViewData["UnpaidAmounts"])[currentRenter.Id].ToString("N0") : "0")">
                            Thanh toán
                        </button>
                    }
                </div>
            </div>
        }
    </div>
</div>

<!-- Modals for Kiosk Tab -->
<div class="modal fade" id="kioskDetailModal" tabindex="-1" aria-labelledby="kioskDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="kioskDetailModalLabel">Chi tiết Kiosk</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p><strong>Tên Kiosk:</strong> <span id="modal-name"></span></p>
                <p><strong>Vị trí:</strong> <span id="modal-location"></span></p>
                <p><strong>Trạng thái:</strong> <span id="modal-isrented"></span></p>
                <p><strong>Người thuê hiện tại:</strong> <span id="modal-rentername"></span></p>
                <p><strong>Ngày bắt đầu:</strong> <span id="modal-rentalstartdate"></span></p>
                <p><strong>Ngày kết thúc:</strong> <span id="modal-rentalenddate"></span></p>
                <p><strong>Phí thuê:</strong> <span id="modal-rentalfee"></span> VNĐ/tháng</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="createModal" tabindex="-1" aria-labelledby="createModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createModalLabel">Thêm Kiosk trống</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="createForm" asp-action="Create" method="post">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="IsRented" value="false" />
                    <div class="form-group">
                        <label for="create-name">Tên Kiosk</label>
                        <input type="text" class="form-control" id="create-name" name="Name" required />
                    </div>
                    <div class="form-group">
                        <label for="create-location">Vị trí</label>
                        <input type="text" class="form-control" id="create-location" name="Location" required />
                    </div>
                    <div class="form-group">
                        <label for="create-rentalfee">Phí thuê (VNĐ/tháng)</label>
                        <input type="number" step="0.01" class="form-control" id="create-rentalfee" name="RentalFee" required />
                    </div>
                    <div class="form-group mt-3">
                        <button type="submit" class="btn btn-primary">Thêm</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Sửa thông tin Kiosk</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editForm" asp-action="Edit" method="post">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="edit-id" name="id" />
                    <div class="form-group">
                        <label for="edit-name">Tên Kiosk</label>
                        <input type="text" class="form-control" id="edit-name" name="name" required />
                    </div>
                    <div class="form-group">
                        <label for="edit-location">Vị trí</label>
                        <input type="text" class="form-control" id="edit-location" name="location" required />
                    </div>
                    <div class="form-group">
                        <label for="edit-rentalfee">Phí thuê (VNĐ/tháng)</label>
                        <input type="number" step="0.01" class="form-control" id="edit-rentalfee" name="rentalFee" required />
                    </div>
                    <div class="form-group mt-3">
                        <button type="submit" class="btn btn-primary">Lưu</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade modal-warning" id="editWarningModal" tabindex="-1" aria-labelledby="editWarningModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editWarningModalLabel">Cảnh báo</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Kiosk này hiện đang được thuê. Bạn không thể sửa thông tin khi Kiosk đã cho thuê.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="rentModal" tabindex="-1" aria-labelledby="rentModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="rentModalLabel">Cho thuê Kiosk</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <ul class="nav nav-tabs" id="rentTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="rent-form-tab" data-bs-toggle="tab" data-bs-target="#rent-form-content" type="button" role="tab" aria-controls="rent-form-content" aria-selected="true">Điền thông tin</button>
                </li>
            </ul>
            <div class="tab-content" id="rentTabContent">
                <div class="tab-pane fade show active" id="rent-form-content" role="tabpanel" aria-labelledby="rent-form-tab">
                    <div class="modal-body">
                        <form id="rentForm" method="post">
                            @Html.AntiForgeryToken()
                            <input type="hidden" id="rent-id" name="id" />
                            <div class="form-group">
                                <label for="rent-rentername">Tên người thuê</label>
                                <input type="text" class="form-control" id="rent-rentername" name="renterName" required />
                            </div>
                            <div class="form-group">
                                <label for="rent-rentalstartdate">Ngày bắt đầu</label>
                                <input type="date" class="form-control" id="rent-rentalstartdate" name="rentalStartDate"
                                       value="@DateTime.Today.ToString("yyyy-MM-dd")" required onchange="validateStartDate(); validateEndDate(); calculateEstimatedFee()" />
                                <div id="rentalstartdate-error" class="text-danger" style="display: none;">
                                    Ngày bắt đầu phải lớn hơn ngày hiện tại.
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="rent-rentalenddate">Ngày kết thúc</label>
                                <input type="date" class="form-control" id="rent-rentalenddate" name="rentalEndDate"
                                       required onchange="validateEndDate(); calculateEstimatedFee()" />
                                <div id="rentalenddate-error" class="text-danger" style="display: none;">
                                    Ngày kết thúc phải cách ngày bắt đầu ít nhất 6 tháng.
                                </div>
                            </div>
                            <div id="rent-estimated-fee"></div>
                            <div class="form-group mt-3">
                                <button type="submit" class="btn btn-success">Hoàn tất</button>
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Xem chi tiết
            document.querySelectorAll('.view-details').forEach(button => {
                button.addEventListener('click', function () {
                    const id = this.getAttribute('data-id');
                    const name = this.getAttribute('data-name');
                    const location = this.getAttribute('data-location');
                    const isRented = this.getAttribute('data-isrented') === 'true';
                    const renterName = this.getAttribute('data-rentername');
                    const rentalStartDate = this.getAttribute('data-rentalstartdate');
                    const rentalEndDate = this.getAttribute('data-rentalenddate');
                    const rentalFee = this.getAttribute('data-rentalfee');

                    document.getElementById('modal-name').textContent = name;
                    document.getElementById('modal-location').textContent = location;
                    document.getElementById('modal-isrented').textContent = isRented ? 'Đã cho thuê' : 'Chưa cho thuê';
                    document.getElementById('modal-rentername').textContent = renterName;
                    document.getElementById('modal-rentalstartdate').textContent = rentalStartDate;
                    document.getElementById('modal-rentalenddate').textContent = rentalEndDate;
                    document.getElementById('modal-rentalfee').textContent = rentalFee;

                    new bootstrap.Modal(document.getElementById('kioskDetailModal')).show();
                });
            });

            // Sửa kiosk
            document.querySelectorAll('.edit-kiosk').forEach(button => {
                button.addEventListener('click', function () {
                    const isRented = this.getAttribute('data-isrented') === 'true';

                    if (isRented) {
                        new bootstrap.Modal(document.getElementById('editWarningModal')).show();
                        return;
                    }

                    const id = this.getAttribute('data-id');
                    const name = this.getAttribute('data-name');
                    const location = this.getAttribute('data-location');
                    const rentalFee = this.getAttribute('data-rentalfee').replace(/[^\d.]/g, '');

                    document.getElementById('edit-id').value = id;
                    document.getElementById('edit-name').value = name;
                    document.getElementById('edit-location').value = location;
                    document.getElementById('edit-rentalfee').value = rentalFee;

                    new bootstrap.Modal(document.getElementById('editModal')).show();
                });
            });

            // Thêm kiosk
            document.getElementById('createForm').addEventListener('submit', function (event) {
                event.preventDefault();
                const formData = new FormData(this);
                fetch('/Kiosk/Create', {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                }).then(response => response.json()).then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert('Lỗi: ' + data.errors.join('\n'));
                    }
                }).catch(error => console.error('Error:', error));
            });

            // Sửa kiosk
            document.getElementById('editForm').addEventListener('submit', function (event) {
                event.preventDefault();
                const formData = new FormData(this);
                fetch('/Kiosk/Edit', {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                }).then(response => response.json()).then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert('Lỗi: ' + data.errors.join('\n'));
                    }
                }).catch(error => console.error('Error:', error));
            });

            // Hủy thuê
            document.querySelectorAll('.return-kiosk').forEach(button => {
                button.addEventListener('click', function () {
                    const rawDataId = this.getAttribute('data-id');
                    const kioskId = parseInt(rawDataId, 10);
                    if (isNaN(kioskId)) {
                        alert('ID không hợp lệ.');
                        return;
                    }
                    fetch('/Kiosk/ReturnKiosk', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify({ id: kioskId })
                    }).then(response => response.json()).then(data => {
                        if (data.success) {
                            location.reload();
                        } else {
                            alert('Lỗi: ' + data.errors.join('\n'));
                        }
                    }).catch(error => console.error('Error:', error));
                });
            });

            // Cho thuê
            document.querySelectorAll('.rent-kiosk').forEach(button => {
                button.addEventListener('click', function () {
                    const id = this.getAttribute('data-id');
                    const name = this.getAttribute('data-name');
                    const location = this.getAttribute('data-location');
                    const rentalFee = this.getAttribute('data-rentalfee').replace(/[^\d.]/g, '');

                    document.getElementById('rent-id').value = id;
                    document.getElementById('rent-rentername').value = '';
                    document.getElementById('rent-rentalstartdate').value = '@DateTime.Today.ToString("yyyy-MM-dd")';
                    document.getElementById('rent-rentalenddate').value = '';
                    document.getElementById('rent-estimated-fee').textContent = '';
                    document.getElementById('rentalstartdate-error').style.display = 'none';
                    document.getElementById('rentalenddate-error').style.display = 'none';

                    new bootstrap.Modal(document.getElementById('rentModal')).show();
                });
            });

            // Xử lý form "Cho thuê"
            document.getElementById('rentForm').addEventListener('submit', function (event) {
                event.preventDefault();
                const id = document.getElementById('rent-id').value;
                const renterName = document.getElementById('rent-rentername').value;
                const rentalStartDate = document.getElementById('rent-rentalstartdate').value;
                const rentalEndDate = document.getElementById('rent-rentalenddate').value;

                if (!id || !renterName || !rentalStartDate || !rentalEndDate) {
                    alert('Vui lòng điền đầy đủ thông tin.');
                    return;
                }

                if (!validateStartDate() || !validateEndDate()) {
                    return;
                }

                fetch('/Kiosk/RentKiosk', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({
                        id: parseInt(id),
                        renterName: renterName,
                        rentalStartDate: rentalStartDate,
                        rentalEndDate: rentalEndDate
                    })
                }).then(response => response.json()).then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert('Lỗi: ' + data.errors.join('\n'));
                    }
                }).catch(error => {
                    console.error('Error:', error);
                    alert('Đã xảy ra lỗi khi gửi yêu cầu. Vui lòng thử lại.');
                });
            });

            // Xóa kiosk
            document.querySelectorAll('.delete-kiosk').forEach(button => {
                button.addEventListener('click', function () {
                    const kioskId = parseInt(this.getAttribute('data-id'), 10);
                    if (isNaN(kioskId)) {
                        alert('ID không hợp lệ.');
                        return;
                    }

                    if (!confirm('Bạn có chắc muốn xóa kiosk này?')) {
                        return;
                    }

                    fetch('/Kiosk/DeleteKiosk', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify({ id: kioskId })
                    }).then(response => response.json()).then(data => {
                        if (data.success) {
                            location.reload();
                        } else {
                            alert('Lỗi: ' + data.errors.join('\n'));
                        }
                    }).catch(error => {
                        console.error('Error:', error);
                        alert('Đã xảy ra lỗi khi xóa kiosk. Vui lòng thử lại.');
                    });
                });
            });

            // Thanh toán
            document.querySelectorAll('.pay-kiosk').forEach(button => {
                button.addEventListener('click', function () {
                    const renterId = parseInt(this.getAttribute('data-renterid'), 10);
                    const amount = parseFloat(this.getAttribute('data-amount').replace(/,/g, '')) || 0;

                    if (isNaN(renterId)) {
                        alert('Renter ID không hợp lệ.');
                        return;
                    }

                    if (!confirm(`Bạn có chắc muốn xác nhận thanh toán ${amount.toLocaleString('vi-VN')} VNĐ cho renter này?`)) {
                        return;
                    }

                    fetch('/Kiosk/Pay', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify({ renterId: renterId })
                    }).then(response => response.json()).then(data => {
                        if (data.success) {
                            location.reload();
                        } else {
                            alert('Lỗi: ' + data.errors.join('\n'));
                        }
                    }).catch(error => {
                        console.error('Error:', error);
                        alert('Đã xảy ra lỗi khi xử lý thanh toán. Vui lòng thử lại.');
                    });
                });
            });

            // Validation ngày
            function validateStartDate() {
                const startDate = document.getElementById('rent-rentalstartdate').value;
                const errorDiv = document.getElementById('rentalstartdate-error');

                if (!startDate) {
                    errorDiv.style.display = 'none';
                    return false;
                }

                const today = new Date();
                today.setHours(0, 0, 0, 0);
                const start = new Date(startDate);

                if (start <= today) {
                    errorDiv.style.display = 'block';
                    return false;
                } else {
                    errorDiv.style.display = 'none';
                    return true;
                }
            }

            function validateEndDate() {
                const startDate = document.getElementById('rent-rentalstartdate').value;
                const endDate = document.getElementById('rent-rentalenddate').value;
                const errorDiv = document.getElementById('rentalenddate-error');

                if (!startDate || !endDate) {
                    errorDiv.style.display = 'none';
                    return false;
                }

                const start = new Date(startDate);
                const end = new Date(endDate);
                const minEndDate = new Date(start);
                minEndDate.setMonth(start.getMonth() + 6);

                if (end < minEndDate) {
                    errorDiv.style.display = 'block';
                    return false;
                } else {
                    errorDiv.style.display = 'none';
                    return true;
                }
            }

            // Tính phí dự kiến
            function calculateEstimatedFee() {
                const startDate = document.getElementById('rent-rentalstartdate').value;
                const endDate = document.getElementById('rent-rentalenddate').value;
                const rentalFee = parseFloat(document.querySelector('.rent-kiosk.active')?.getAttribute('data-rentalfee')?.replace(/[^\d.]/g, '') || 0);

                if (!validateStartDate() || !validateEndDate() || !startDate || !endDate || !rentalFee) {
                    document.getElementById('rent-estimated-fee').textContent = '';
                    return;
                }

                const start = new Date(startDate);
                const end = new Date(endDate);
                const diffMonths = (end.getFullYear() - start.getFullYear()) * 12 + (end.getMonth() - start.getMonth());
                const startDay = start.getDate();

                let totalFee = 0;
                if (diffMonths >= 0) {
                    if (startDay > 15) {
                        totalFee += rentalFee * 0.5;
                    } else {
                        totalFee += rentalFee;
                    }
                    totalFee += rentalFee * Math.max(0, diffMonths - (startDay > 15 ? 0 : 1));
                }

                document.getElementById('rent-estimated-fee').textContent = `Phí dự kiến: ${totalFee.toLocaleString('vi-VN')} VNĐ`;
            }
        });
    </script>
}
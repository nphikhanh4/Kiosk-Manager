@model List<KioskManagementWebApp.Models.TuitionFee>

@{
    ViewData["Title"] = "Học phí đã quá hạn";
    var role = ViewData["Role"] as string;
}

<style>
    .tuition-container {
        background: linear-gradient(135deg, #f5f7fa 0%, #e4e7eb 100%);
        padding: 40px;
        border-radius: 15px;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);
        margin: 30px auto;
        max-width: 1400px;
    }

    .section-title {
        font-size: 2.5rem;
        font-weight: 800;
        color: #2d3748;
        margin-bottom: 30px;
        text-align: center;
        letter-spacing: 1px;
        text-transform: uppercase;
        background: linear-gradient(to right, #ff4d4d, #ff8080);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }

    .table-container {
        background: #ffffff;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.06);
        transition: transform 0.2s ease;
    }

        .table-container:hover {
            transform: translateY(-3px);
        }

    .table thead {
        background: linear-gradient(to right, #ff4d4d, #cc0000);
        color: #ffffff;
        text-transform: uppercase;
        font-size: 0.9rem;
        letter-spacing: 0.5px;
    }

    .table th, .table td {
        padding: 15px;
        text-align: center;
        vertical-align: middle;
        border-bottom: 1px solid #e9ecef;
    }

        .table th.sortable {
            cursor: pointer;
            position: relative;
            padding-right: 30px;
        }

            .table th.sortable:hover {
                background: linear-gradient(to right, #cc0000, #990000);
            }

            .table th.sortable .sort-icon {
                position: absolute;
                right: 10px;
                top: 50%;
                transform: translateY(-50%);
                font-size: 0.8rem;
            }

            .table th.sortable.asc .sort-icon::after {
                content: '↑';
            }

            .table th.sortable.desc .sort-icon::after {
                content: '↓';
            }

            .table th.sortable .sort-icon::after {
                content: '↕';
            }

    .table tbody tr.tuition-row {
        cursor: pointer;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

        .table tbody tr.tuition-row:hover {
            background-color: #f1f4f8;
            transform: scale(1.01);
        }

    .modal-content {
        border-radius: 15px;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
        border: none;
    }

    .modal-header {
        background: linear-gradient(to right, #ff4d4d, #cc0000);
        color: #ffffff;
        border-top-left-radius: 15px;
        border-top-right-radius: 15px;
        padding: 20px;
    }

    .modal-title {
        font-weight: 700;
        font-size: 1.5rem;
    }

    .modal-body {
        padding: 25px;
    }

    .modal-footer {
        padding: 15px 20px;
        border-bottom-left-radius: 15px;
        border-bottom-right-radius: 15px;
    }

        .modal-footer .btn-secondary {
            background: #6b7280;
            border: none;
            padding: 10px 25px;
            font-size: 1.1rem;
            font-weight: 700;
            border-radius: 10px;
            color: #ffffff;
            transition: all 0.3s ease;
        }

            .modal-footer .btn-secondary:hover {
                background: #4b5563;
                transform: translateY(-2px);
            }

    .logout-btn {
        position: absolute;
        top: 20px;
        right: 20px;
        background: linear-gradient(to right, #dc3545, #b02a37);
        border: none;
        padding: 8px 20px;
        font-size: 1rem;
        font-weight: 600;
        border-radius: 8px;
        color: #ffffff;
        transition: background 0.3s ease, transform 0.2s ease;
    }

        .logout-btn:hover {
            background: linear-gradient(to right, #b02a37, #8b1e2b);
            transform: translateY(-2px);
        }

        .logout-btn:active {
            transform: translateY(1px);
        }
</style>

<div class="tab-pane fade show active" id="tuition-content" role="tabpanel" aria-labelledby="tuition-tab">
    <div class="container tuition-container">
        <h2 class="section-title">Danh sách học phí đã quá hạn</h2>
        @if (Model != null && Model.Any())
        {
            <div class="table-container">
                <table class="table table-bordered mb-0" id="tuition-table">
                    <thead>
                        <tr>
                            @if (role == "Admin")
                            {
                                <th class="sortable" data-sort="studentid">Mã SV <span class="sort-icon"></span></th>
                                <th class="sortable" data-sort="studentname">Họ tên <span class="sort-icon"></span></th>
                                <th class="sortable" data-sort="department">Khoa <span class="sort-icon"></span></th>
                            }
                            <th class="sortable" data-sort="amount">Số tiền <span class="sort-icon"></span></th>
                            <th class="sortable" data-sort="duedate">Ngày đến hạn <span class="sort-icon"></span></th>
                            <th class="sortable" data-sort="status">Trạng thái <span class="sort-icon"></span></th>
                            <th class="sortable" data-sort="paymentdate">Ngày thanh toán <span class="sort-icon"></span></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr class="tuition-row"
                                data-id="@item.Id"
                                data-studentid="@item.StudentId"
                                data-studentname="@(item.Student?.StudentName ?? "N/A")"
                                data-department="@(item.Student?.Department ?? "N/A")"
                                data-amount="@item.Amount.ToString("N0", System.Globalization.CultureInfo.InvariantCulture)"
                                data-duedate="@item.DueDate.ToString("dd/MM/yyyy")"
                                data-status="@(item.IsPaid ? "Đã thanh toán" : "Chưa thanh toán")"
                                data-paymentdate="@(item.PaymentDate.HasValue ? item.PaymentDate.Value.ToString("dd/MM/yyyy") : "N/A")">
                                @if (role == "Admin")
                                {
                                    <td>@item.StudentId</td>
                                    <td>@(item.Student?.StudentName ?? "N/A")</td>
                                    <td>@(item.Student?.Department ?? "N/A")</td>
                                }
                                <td>@item.Amount.ToString("N0", System.Globalization.CultureInfo.InvariantCulture) VNĐ</td>
                                <td>@item.DueDate.ToString("dd/MM/yyyy")</td>
                                <td>@(item.IsPaid ? "Đã thanh toán" : "Chưa thanh toán")</td>
                                <td>@(item.PaymentDate.HasValue ? item.PaymentDate.Value.ToString("dd/MM/yyyy") : "N/A")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="alert alert-info text-center" role="alert">
                Không có học phí nào quá hạn.
            </div>
        }
    </div>
</div>

<!-- Modal hiển thị chi tiết học phí -->
<div class="modal fade" id="tuitionDetailModal" tabindex="-1" aria-labelledby="tuitionDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="tuitionDetailModalLabel">Chi tiết học phí</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p><strong>Mã SV:</strong> <span id="modal-studentid"></span></p>
                <p><strong>Họ tên:</strong> <span id="modal-studentname"></span></p>
                <p><strong>Khoa:</strong> <span id="modal-department"></span></p>
                <p><strong>Số tiền:</strong> <span id="modal-amount"></span> VNĐ</p>
                <p><strong>Ngày đến hạn:</strong> <span id="modal-duedate"></span></p>
                <p><strong>Trạng thái:</strong> <span id="modal-status"></span></p>
                <p><strong>Ngày thanh toán:</strong> <span id="modal-paymentdate"></span></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            let currentTuitionId = null;

            const table = document.getElementById('tuition-table');
            const headers = table.querySelectorAll('th.sortable');

            headers.forEach(header => {
                header.addEventListener('click', function () {
                    const sortKey = this.getAttribute('data-sort');
                    const isAscending = this.classList.contains('asc');
                    const newDirection = isAscending ? 'desc' : 'asc';

                    headers.forEach(h => h.classList.remove('asc', 'desc'));
                    this.classList.add(newDirection);

                    const tbody = table.querySelector('tbody');
                    const rows = Array.from(tbody.querySelectorAll('tr.tuition-row'));

                    rows.sort((rowA, rowB) => {
                        let valueA, valueB;

                        switch (sortKey) {
                            case 'studentid':
                                valueA = rowA.getAttribute('data-studentid');
                                valueB = rowB.getAttribute('data-studentid');
                                break;
                            case 'studentname':
                                valueA = rowA.getAttribute('data-studentname');
                                valueB = rowB.getAttribute('data-studentname');
                                break;
                            case 'department':
                                valueA = rowA.getAttribute('data-department');
                                valueB = rowB.getAttribute('data-department');
                                break;
                            case 'amount':
                                valueA = parseFloat(rowA.getAttribute('data-amount').replace(/[^\d.-]/g, ''));
                                valueB = parseFloat(rowB.getAttribute('data-amount').replace(/[^\d.-]/g, ''));
                                break;
                            case 'duedate':
                                valueA = parseDate(rowA.getAttribute('data-duedate'));
                                valueB = parseDate(rowB.getAttribute('data-duedate'));
                                break;
                            case 'status':
                                valueA = rowA.getAttribute('data-status');
                                valueB = rowB.getAttribute('data-status');
                                break;
                            case 'paymentdate':
                                valueA = rowA.getAttribute('data-paymentdate') === 'N/A' ? 0 : parseDate(rowA.getAttribute('data-paymentdate'));
                                valueB = rowB.getAttribute('data-paymentdate') === 'N/A' ? 0 : parseDate(rowB.getAttribute('data-paymentdate'));
                                break;
                            default:
                                return 0;
                        }

                        if (sortKey === 'amount' || sortKey === 'duedate' || sortKey === 'paymentdate') {
                            return newDirection === 'asc' ? valueA - valueB : valueB - valueA;
                        } else {
                            return newDirection === 'asc'
                                ? valueA.localeCompare(valueB)
                                : valueB.localeCompare(valueA);
                        }
                    });

                    while (tbody.firstChild) {
                        tbody.removeChild(tbody.firstChild);
                    }

                    rows.forEach(row => tbody.appendChild(row));
                });
            });

            function parseDate(dateStr) {
                const parts = dateStr.split('/');
                if (parts.length === 3) {
                    const day = parseInt(parts[0], 10);
                    const month = parseInt(parts[1], 10) - 1;
                    const year = parseInt(parts[2], 10);
                    return new Date(year, month, day).getTime();
                }
                return 0;
            }

            // Xử lý click để hiển thị modal chi tiết
            document.querySelectorAll('.tuition-row').forEach(row => {
                row.addEventListener('click', function(e) {
                    const id = this.getAttribute('data-id');
                    currentTuitionId = id;

                    fetch(`/Tuition/GetTuitionDetails?id=${id}`, {
                        method: 'GET',
                        headers: {
                            'Accept': 'application/json'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (!data.success) {
                            alert(data.message || 'Không thể tải chi tiết học phí.');
                            return;
                        }

                        document.getElementById('modal-studentid').textContent = data.studentId;
                        document.getElementById('modal-studentname').textContent = data.studentName;
                        document.getElementById('modal-department').textContent = data.department;
                        document.getElementById('modal-amount').textContent = data.amount;
                        document.getElementById('modal-duedate').textContent = data.dueDate;
                        document.getElementById('modal-status').textContent = data.status;
                        document.getElementById('modal-paymentdate').textContent = data.paymentDate;

                        new bootstrap.Modal(document.getElementById('tuitionDetailModal')).show();
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Đã xảy ra lỗi khi tải chi tiết học phí.');
                    });
                });
            });
        });
    </script>
}